{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import Grid from \"./Grid\";\n// import \"./GameOfLife.css\";\n\n// const GameOfLife = () => {\n//   const [numRows, setNumRows] = useState(20);\n//   const [numCols, setNumCols] = useState(20);\n//   const [grid, setGrid] = useState([]);\n//   const [livingCells, setLivingCells] = useState(0);\n//   const [heightError, setHeightError] = useState(\"\");\n//   const [tempRows, setTempRows] = useState(numRows);\n//   const [tempCols, setTempCols] = useState(numCols);\n\n//   useEffect(() => {\n//     initializeGrid();\n//   }, []);\n\n//   useEffect(() => {\n//     countLivingCells();\n//   }, [grid]);\n\n//   useEffect(() => {\n//     initializeGrid();\n//   }, [numRows, numCols]);\n\n//   const initializeGrid = () => {\n//     if (numRows > 0 && numCols > 0) {\n//       const newGrid = Array.from({ length: numRows }, () =>\n//         Array.from({ length: numCols }, () => (Math.random() < 0.05 ? 1 : 0))\n//       );\n//       setGrid(newGrid);\n//     }\n//   };\n\n//   const toggleCell = (i, j) => {\n//     const newGrid = [...grid];\n//     newGrid[i][j] = newGrid[i][j] ? 0 : 1;\n//     setGrid(newGrid);\n//   };\n\n//   const countLivingCells = () => {\n//     let count = 0;\n//     grid.forEach((row) => {\n//       row.forEach((cell) => {\n//         if (cell) count++;\n//       });\n//     });\n//     setLivingCells(count);\n//   };\n\n//   const resetGrid = () => {\n//     setNumRows(20);\n//     setNumCols(20);\n//     setTempCols(20);\n//     setTempRows(20);\n//     setHeightError(\"\");\n//     initializeGrid();\n//   };\n\n//   const stepSimulation = () => {\n//     const newGrid = [];\n//     for (let i = 0; i < numRows; i++) {\n//       const newRow = [];\n//       for (let j = 0; j < numCols; j++) {\n//         const neighbors = countNeighbors(i, j);\n//         if (grid[i][j] === 1) {\n//           if (neighbors < 2 || neighbors > 3) {\n//             newRow.push(0); // Rule 1 and Rule 3\n//           } else {\n//             newRow.push(1); // Rule 2\n//           }\n//         } else {\n//           if (neighbors === 3) {\n//             newRow.push(1); // Rule 4\n//           } else {\n//             newRow.push(0);\n//           }\n//         }\n//       }\n//       newGrid.push(newRow);\n//     }\n//     setGrid(newGrid);\n//   };\n\n//   const countNeighbors = (i, j) => {\n//     const offsets = [\n//       [-1, -1],\n//       [-1, 0],\n//       [-1, 1],\n//       [0, -1],\n//       [0, 1],\n//       [1, -1],\n//       [1, 0],\n//       [1, 1],\n//     ];\n//     let count = 0;\n//     offsets.forEach(([dx, dy]) => {\n//       const ni = i + dx;\n//       const nj = j + dy;\n//       if (\n//         ni >= 0 &&\n//         ni < numRows &&\n//         nj >= 0 &&\n//         nj < numCols &&\n//         grid[ni][nj] === 1\n//       ) {\n//         count++;\n//       }\n//     });\n//     return count;\n//   };\n\n//   const handleInputChange = (e, setter) => {\n//     const value = parseInt(e.target.value);\n//     if (!isNaN(value) && value >= 3 && value <= 40) {\n//       setter(value);\n//       setHeightError(\"\");\n//     } else {\n//       setHeightError(\"Please enter a number between 3 and 40\");\n//     }\n//   };\n\n//   const handleKeyDown = (e) => {\n//     if (e.key === \"Enter\") {\n//       handleInputChange({ target: { value: tempRows } }, setNumRows);\n//       handleInputChange({ target: { value: tempCols } }, setNumCols);\n//       initializeGrid();\n//     }\n//   };\n\n//   return (\n//     <div className=\"game-container\">\n//       <div className=\"grid-info\">\n//         <span>Living Cells: {livingCells}</span>\n//         <div>\n//           <input\n//             type=\"number\"\n//             value={tempRows}\n//             onChange={(e) => handleInputChange(e, setTempRows)}\n//             onKeyDown={handleKeyDown}\n//           />\n//           <input\n//             type=\"number\"\n//             value={tempCols}\n//             onChange={(e) => handleInputChange(e, setTempCols)}\n//             onKeyDown={handleKeyDown}\n//           />\n//           {heightError && <div className=\"error\">{heightError}</div>}\n//         </div>\n//         <button onClick={resetGrid}>Reset Grid</button>\n//         <button onClick={stepSimulation}>Step</button>\n//       </div>\n//       <Grid grid={grid} toggleCell={toggleCell} />\n//     </div>\n//   );\n// };\n\n// export default GameOfLife;","map":{"version":3,"names":[],"sources":["/Users/yizhouchen/Desktop/conways-game-by-mingyigao/src/components/GameOfLife.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import Grid from \"./Grid\";\n// import \"./GameOfLife.css\";\n\n// const GameOfLife = () => {\n//   const [numRows, setNumRows] = useState(20);\n//   const [numCols, setNumCols] = useState(20);\n//   const [grid, setGrid] = useState([]);\n//   const [livingCells, setLivingCells] = useState(0);\n//   const [heightError, setHeightError] = useState(\"\");\n//   const [tempRows, setTempRows] = useState(numRows);\n//   const [tempCols, setTempCols] = useState(numCols);\n\n//   useEffect(() => {\n//     initializeGrid();\n//   }, []);\n\n//   useEffect(() => {\n//     countLivingCells();\n//   }, [grid]);\n\n//   useEffect(() => {\n//     initializeGrid();\n//   }, [numRows, numCols]);\n\n//   const initializeGrid = () => {\n//     if (numRows > 0 && numCols > 0) {\n//       const newGrid = Array.from({ length: numRows }, () =>\n//         Array.from({ length: numCols }, () => (Math.random() < 0.05 ? 1 : 0))\n//       );\n//       setGrid(newGrid);\n//     }\n//   };\n\n//   const toggleCell = (i, j) => {\n//     const newGrid = [...grid];\n//     newGrid[i][j] = newGrid[i][j] ? 0 : 1;\n//     setGrid(newGrid);\n//   };\n\n//   const countLivingCells = () => {\n//     let count = 0;\n//     grid.forEach((row) => {\n//       row.forEach((cell) => {\n//         if (cell) count++;\n//       });\n//     });\n//     setLivingCells(count);\n//   };\n\n//   const resetGrid = () => {\n//     setNumRows(20);\n//     setNumCols(20);\n//     setTempCols(20);\n//     setTempRows(20);\n//     setHeightError(\"\");\n//     initializeGrid();\n//   };\n\n//   const stepSimulation = () => {\n//     const newGrid = [];\n//     for (let i = 0; i < numRows; i++) {\n//       const newRow = [];\n//       for (let j = 0; j < numCols; j++) {\n//         const neighbors = countNeighbors(i, j);\n//         if (grid[i][j] === 1) {\n//           if (neighbors < 2 || neighbors > 3) {\n//             newRow.push(0); // Rule 1 and Rule 3\n//           } else {\n//             newRow.push(1); // Rule 2\n//           }\n//         } else {\n//           if (neighbors === 3) {\n//             newRow.push(1); // Rule 4\n//           } else {\n//             newRow.push(0);\n//           }\n//         }\n//       }\n//       newGrid.push(newRow);\n//     }\n//     setGrid(newGrid);\n//   };\n\n//   const countNeighbors = (i, j) => {\n//     const offsets = [\n//       [-1, -1],\n//       [-1, 0],\n//       [-1, 1],\n//       [0, -1],\n//       [0, 1],\n//       [1, -1],\n//       [1, 0],\n//       [1, 1],\n//     ];\n//     let count = 0;\n//     offsets.forEach(([dx, dy]) => {\n//       const ni = i + dx;\n//       const nj = j + dy;\n//       if (\n//         ni >= 0 &&\n//         ni < numRows &&\n//         nj >= 0 &&\n//         nj < numCols &&\n//         grid[ni][nj] === 1\n//       ) {\n//         count++;\n//       }\n//     });\n//     return count;\n//   };\n\n//   const handleInputChange = (e, setter) => {\n//     const value = parseInt(e.target.value);\n//     if (!isNaN(value) && value >= 3 && value <= 40) {\n//       setter(value);\n//       setHeightError(\"\");\n//     } else {\n//       setHeightError(\"Please enter a number between 3 and 40\");\n//     }\n//   };\n\n//   const handleKeyDown = (e) => {\n//     if (e.key === \"Enter\") {\n//       handleInputChange({ target: { value: tempRows } }, setNumRows);\n//       handleInputChange({ target: { value: tempCols } }, setNumCols);\n//       initializeGrid();\n//     }\n//   };\n\n//   return (\n//     <div className=\"game-container\">\n//       <div className=\"grid-info\">\n//         <span>Living Cells: {livingCells}</span>\n//         <div>\n//           <input\n//             type=\"number\"\n//             value={tempRows}\n//             onChange={(e) => handleInputChange(e, setTempRows)}\n//             onKeyDown={handleKeyDown}\n//           />\n//           <input\n//             type=\"number\"\n//             value={tempCols}\n//             onChange={(e) => handleInputChange(e, setTempCols)}\n//             onKeyDown={handleKeyDown}\n//           />\n//           {heightError && <div className=\"error\">{heightError}</div>}\n//         </div>\n//         <button onClick={resetGrid}>Reset Grid</button>\n//         <button onClick={stepSimulation}>Step</button>\n//       </div>\n//       <Grid grid={grid} toggleCell={toggleCell} />\n//     </div>\n//   );\n// };\n\n// export default GameOfLife;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}