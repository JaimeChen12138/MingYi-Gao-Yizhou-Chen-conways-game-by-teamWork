{"ast":null,"code":"var _jsxFileName = \"/Users/yizhouchen/Desktop/conways-game-by-mingyigao/src/components/GameOfLife.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Grid from \"./Grid\";\nimport \"./GameOfLife.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameOfLife = () => {\n  _s();\n  const [numRows, setNumRows] = useState(20);\n  const [numCols, setNumCols] = useState(20);\n  const [grid, setGrid] = useState([]);\n  const [livingCells, setLivingCells] = useState(0);\n  const [heightError, setHeightError] = useState(\"\");\n  const [tempRows, setTempRows] = useState(numRows);\n  const [tempCols, setTempCols] = useState(numCols);\n  const [cellChangeCount, setCellChangeCount] = useState([]);\n\n  // Initialize grid and cellChangeCount\n  useEffect(() => {\n    initializeGrid();\n  }, []);\n\n  // Update livingCells count\n  useEffect(() => {\n    countLivingCells();\n  }, [grid]);\n\n  // Reset grid when numRows or numCols change\n  useEffect(() => {\n    initializeGrid();\n  }, [numRows, numCols]);\n\n  // Initialize grid with random values\n  const initializeGrid = () => {\n    if (numRows > 0 && numCols > 0) {\n      const newGrid = Array.from({\n        length: numRows\n      }, () => Array.from({\n        length: numCols\n      }, () => Math.random() < 0.05 ? 1 : 0));\n      setGrid(newGrid);\n      setCellChangeCount(Array.from({\n        length: numRows\n      }, () => Array.from({\n        length: numCols\n      }, () => 0)));\n    }\n  };\n\n  // Toggle cell state and update cellChangeCount\n  const toggleCell = (i, j) => {\n    const newGrid = [...grid];\n    newGrid[i][j] = newGrid[i][j] ? 0 : 1;\n    setGrid(newGrid);\n    const newChangeCount = [...cellChangeCount];\n    newChangeCount[i][j]++;\n    setCellChangeCount(newChangeCount);\n  };\n\n  // Count living cells\n  const countLivingCells = () => {\n    let count = 0;\n    grid.forEach(row => {\n      row.forEach(cell => {\n        if (cell) count++;\n      });\n    });\n    setLivingCells(count);\n  };\n\n  // Reset grid to initial state\n  const resetGrid = () => {\n    setNumRows(20);\n    setNumCols(20);\n    setTempCols(20);\n    setTempRows(20);\n    setHeightError(\"\");\n    initializeGrid();\n  };\n\n  // Step simulation to the next generation\n  const stepSimulation = () => {\n    const newGrid = [];\n    for (let i = 0; i < numRows; i++) {\n      const newRow = [];\n      for (let j = 0; j < numCols; j++) {\n        const neighbors = countNeighbors(i, j);\n        if (grid[i][j] === 1) {\n          if (neighbors < 2 || neighbors > 3) {\n            newRow.push(0); // Rule 1 and Rule 3\n          } else {\n            newRow.push(1); // Rule 2\n          }\n        } else {\n          if (neighbors === 3) {\n            newRow.push(1); // Rule 4\n          } else {\n            newRow.push(0);\n          }\n        }\n      }\n      newGrid.push(newRow);\n    }\n    setGrid(newGrid);\n  };\n\n  // Count the number of living neighbors for a cell\n  const countNeighbors = (i, j) => {\n    const offsets = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n    let count = 0;\n    offsets.forEach(([dx, dy]) => {\n      const ni = i + dx;\n      const nj = j + dy;\n      if (ni >= 0 && ni < numRows && nj >= 0 && nj < numCols && grid[ni][nj] === 1) {\n        count++;\n      }\n    });\n    return count;\n  };\n\n  // Handle input change for numRows and numCols\n  const handleInputChange = (e, setter) => {\n    const value = parseInt(e.target.value);\n    if (!isNaN(value) && value >= 3 && value <= 40) {\n      setter(value);\n      setHeightError(\"\");\n    } else {\n      setHeightError(\"Please enter a number between 3 and 40\");\n    }\n  };\n\n  // Handle Enter key press to update grid dimensions\n  const handleKeyDown = e => {\n    if (e.key === \"Enter\") {\n      handleInputChange({\n        target: {\n          value: tempRows\n        }\n      }, setNumRows);\n      handleInputChange({\n        target: {\n          value: tempCols\n        }\n      }, setNumCols);\n      initializeGrid();\n    }\n  };\n\n  // Render the Game of Life component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Living Cells: \", livingCells]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: tempRows,\n          onChange: e => handleInputChange(e, setTempRows),\n          onKeyDown: handleKeyDown\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: tempCols,\n          onChange: e => handleInputChange(e, setTempCols),\n          onKeyDown: handleKeyDown\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), heightError && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: heightError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 27\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGrid,\n        children: \"Reset Grid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stepSimulation,\n        children: \"Step\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      grid: grid,\n      toggleCell: toggleCell\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n};\n_s(GameOfLife, \"SHpHR532Y/PZPCsMwspyWTuw8ps=\");\n_c = GameOfLife;\nexport default GameOfLife;\n\n// import React, { useState, useEffect } from \"react\";\n// import Grid from \"./Grid\";\n// import \"./GameOfLife.css\";\n\n// const GameOfLife = () => {\n//   const [numRows, setNumRows] = useState(20);\n//   const [numCols, setNumCols] = useState(20);\n//   const [grid, setGrid] = useState([]);\n//   const [livingCells, setLivingCells] = useState(0);\n//   const [heightError, setHeightError] = useState(\"\");\n//   const [tempRows, setTempRows] = useState(numRows);\n//   const [tempCols, setTempCols] = useState(numCols);\n\n//   useEffect(() => {\n//     initializeGrid();\n//   }, []);\n\n//   useEffect(() => {\n//     countLivingCells();\n//   }, [grid]);\n\n//   useEffect(() => {\n//     initializeGrid();\n//   }, [numRows, numCols]);\n\n//   const initializeGrid = () => {\n//     if (numRows > 0 && numCols > 0) {\n//       const newGrid = Array.from({ length: numRows }, () =>\n//         Array.from({ length: numCols }, () => (Math.random() < 0.05 ? 1 : 0))\n//       );\n//       setGrid(newGrid);\n//     }\n//   };\n\n//   const toggleCell = (i, j) => {\n//     const newGrid = [...grid];\n//     newGrid[i][j] = newGrid[i][j] ? 0 : 1;\n//     setGrid(newGrid);\n//   };\n\n//   const countLivingCells = () => {\n//     let count = 0;\n//     grid.forEach((row) => {\n//       row.forEach((cell) => {\n//         if (cell) count++;\n//       });\n//     });\n//     setLivingCells(count);\n//   };\n\n//   const resetGrid = () => {\n//     setNumRows(20);\n//     setNumCols(20);\n//     setTempCols(20);\n//     setTempRows(20);\n//     setHeightError(\"\");\n//     initializeGrid();\n//   };\n\n//   const stepSimulation = () => {\n//     const newGrid = [];\n//     for (let i = 0; i < numRows; i++) {\n//       const newRow = [];\n//       for (let j = 0; j < numCols; j++) {\n//         const neighbors = countNeighbors(i, j);\n//         if (grid[i][j] === 1) {\n//           if (neighbors < 2 || neighbors > 3) {\n//             newRow.push(0); // Rule 1 and Rule 3\n//           } else {\n//             newRow.push(1); // Rule 2\n//           }\n//         } else {\n//           if (neighbors === 3) {\n//             newRow.push(1); // Rule 4\n//           } else {\n//             newRow.push(0);\n//           }\n//         }\n//       }\n//       newGrid.push(newRow);\n//     }\n//     setGrid(newGrid);\n//   };\n\n//   const countNeighbors = (i, j) => {\n//     const offsets = [\n//       [-1, -1],\n//       [-1, 0],\n//       [-1, 1],\n//       [0, -1],\n//       [0, 1],\n//       [1, -1],\n//       [1, 0],\n//       [1, 1],\n//     ];\n//     let count = 0;\n//     offsets.forEach(([dx, dy]) => {\n//       const ni = i + dx;\n//       const nj = j + dy;\n//       if (\n//         ni >= 0 &&\n//         ni < numRows &&\n//         nj >= 0 &&\n//         nj < numCols &&\n//         grid[ni][nj] === 1\n//       ) {\n//         count++;\n//       }\n//     });\n//     return count;\n//   };\n\n//   const handleInputChange = (e, setter) => {\n//     const value = parseInt(e.target.value);\n//     if (!isNaN(value) && value >= 3 && value <= 40) {\n//       setter(value);\n//       setHeightError(\"\");\n//     } else {\n//       setHeightError(\"Please enter a number between 3 and 40\");\n//     }\n//   };\n\n//   const handleKeyDown = (e) => {\n//     if (e.key === \"Enter\") {\n//       handleInputChange({ target: { value: tempRows } }, setNumRows);\n//       handleInputChange({ target: { value: tempCols } }, setNumCols);\n//       initializeGrid();\n//     }\n//   };\n\n//   return (\n//     <div className=\"game-container\">\n//       <div className=\"grid-info\">\n//         <span>Living Cells: {livingCells}</span>\n//         <div>\n//           <input\n//             type=\"number\"\n//             value={tempRows}\n//             onChange={(e) => handleInputChange(e, setTempRows)}\n//             onKeyDown={handleKeyDown}\n//           />\n//           <input\n//             type=\"number\"\n//             value={tempCols}\n//             onChange={(e) => handleInputChange(e, setTempCols)}\n//             onKeyDown={handleKeyDown}\n//           />\n//           {heightError && <div className=\"error\">{heightError}</div>}\n//         </div>\n//         <button onClick={resetGrid}>Reset Grid</button>\n//         <button onClick={stepSimulation}>Step</button>\n//       </div>\n//       <Grid grid={grid} toggleCell={toggleCell} />\n//     </div>\n//   );\n// };\n\n// export default GameOfLife;\nvar _c;\n$RefreshReg$(_c, \"GameOfLife\");","map":{"version":3,"names":["React","useState","useEffect","Grid","jsxDEV","_jsxDEV","GameOfLife","_s","numRows","setNumRows","numCols","setNumCols","grid","setGrid","livingCells","setLivingCells","heightError","setHeightError","tempRows","setTempRows","tempCols","setTempCols","cellChangeCount","setCellChangeCount","initializeGrid","countLivingCells","newGrid","Array","from","length","Math","random","toggleCell","i","j","newChangeCount","count","forEach","row","cell","resetGrid","stepSimulation","newRow","neighbors","countNeighbors","push","offsets","dx","dy","ni","nj","handleInputChange","e","setter","value","parseInt","target","isNaN","handleKeyDown","key","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onKeyDown","onClick","_c","$RefreshReg$"],"sources":["/Users/yizhouchen/Desktop/conways-game-by-mingyigao/src/components/GameOfLife.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Grid from \"./Grid\";\nimport \"./GameOfLife.css\";\n\nconst GameOfLife = () => {\n  const [numRows, setNumRows] = useState(20);\n  const [numCols, setNumCols] = useState(20);\n  const [grid, setGrid] = useState([]);\n  const [livingCells, setLivingCells] = useState(0);\n  const [heightError, setHeightError] = useState(\"\");\n  const [tempRows, setTempRows] = useState(numRows);\n  const [tempCols, setTempCols] = useState(numCols);\n  const [cellChangeCount, setCellChangeCount] = useState([]);\n\n  // Initialize grid and cellChangeCount\n  useEffect(() => {\n    initializeGrid();\n  }, []);\n\n  // Update livingCells count\n  useEffect(() => {\n    countLivingCells();\n  }, [grid]);\n\n  // Reset grid when numRows or numCols change\n  useEffect(() => {\n    initializeGrid();\n  }, [numRows, numCols]);\n\n  // Initialize grid with random values\n  const initializeGrid = () => {\n    if (numRows > 0 && numCols > 0) {\n      const newGrid = Array.from({ length: numRows }, () =>\n        Array.from({ length: numCols }, () => (Math.random() < 0.05 ? 1 : 0))\n      );\n      setGrid(newGrid);\n      setCellChangeCount(\n        Array.from({ length: numRows }, () =>\n          Array.from({ length: numCols }, () => 0)\n        )\n      );\n    }\n  };\n\n  // Toggle cell state and update cellChangeCount\n  const toggleCell = (i, j) => {\n    const newGrid = [...grid];\n    newGrid[i][j] = newGrid[i][j] ? 0 : 1;\n    setGrid(newGrid);\n    const newChangeCount = [...cellChangeCount];\n    newChangeCount[i][j]++;\n    setCellChangeCount(newChangeCount);\n  };\n\n  // Count living cells\n  const countLivingCells = () => {\n    let count = 0;\n    grid.forEach((row) => {\n      row.forEach((cell) => {\n        if (cell) count++;\n      });\n    });\n    setLivingCells(count);\n  };\n\n  // Reset grid to initial state\n  const resetGrid = () => {\n    setNumRows(20);\n    setNumCols(20);\n    setTempCols(20);\n    setTempRows(20);\n    setHeightError(\"\");\n    initializeGrid();\n  };\n\n  // Step simulation to the next generation\n  const stepSimulation = () => {\n    const newGrid = [];\n    for (let i = 0; i < numRows; i++) {\n      const newRow = [];\n      for (let j = 0; j < numCols; j++) {\n        const neighbors = countNeighbors(i, j);\n        if (grid[i][j] === 1) {\n          if (neighbors < 2 || neighbors > 3) {\n            newRow.push(0); // Rule 1 and Rule 3\n          } else {\n            newRow.push(1); // Rule 2\n          }\n        } else {\n          if (neighbors === 3) {\n            newRow.push(1); // Rule 4\n          } else {\n            newRow.push(0);\n          }\n        }\n      }\n      newGrid.push(newRow);\n    }\n    setGrid(newGrid);\n  };\n\n  // Count the number of living neighbors for a cell\n  const countNeighbors = (i, j) => {\n    const offsets = [\n      [-1, -1],\n      [-1, 0],\n      [-1, 1],\n      [0, -1],\n      [0, 1],\n      [1, -1],\n      [1, 0],\n      [1, 1],\n    ];\n    let count = 0;\n    offsets.forEach(([dx, dy]) => {\n      const ni = i + dx;\n      const nj = j + dy;\n      if (\n        ni >= 0 &&\n        ni < numRows &&\n        nj >= 0 &&\n        nj < numCols &&\n        grid[ni][nj] === 1\n      ) {\n        count++;\n      }\n    });\n    return count;\n  };\n\n  // Handle input change for numRows and numCols\n  const handleInputChange = (e, setter) => {\n    const value = parseInt(e.target.value);\n    if (!isNaN(value) && value >= 3 && value <= 40) {\n      setter(value);\n      setHeightError(\"\");\n    } else {\n      setHeightError(\"Please enter a number between 3 and 40\");\n    }\n  };\n\n  // Handle Enter key press to update grid dimensions\n  const handleKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      handleInputChange({ target: { value: tempRows } }, setNumRows);\n      handleInputChange({ target: { value: tempCols } }, setNumCols);\n      initializeGrid();\n    }\n  };\n\n  // Render the Game of Life component\n  return (\n    <div className=\"game-container\">\n      <div className=\"grid-info\">\n        <span>Living Cells: {livingCells}</span>\n        <div>\n          <input\n            type=\"number\"\n            value={tempRows}\n            onChange={(e) => handleInputChange(e, setTempRows)}\n            onKeyDown={handleKeyDown}\n          />\n          <input\n            type=\"number\"\n            value={tempCols}\n            onChange={(e) => handleInputChange(e, setTempCols)}\n            onKeyDown={handleKeyDown}\n          />\n          {heightError && <div className=\"error\">{heightError}</div>}\n        </div>\n        <button onClick={resetGrid}>Reset Grid</button>\n        <button onClick={stepSimulation}>Step</button>\n      </div>\n      <Grid grid={grid} toggleCell={toggleCell} />\n    </div>\n  );\n};\n\nexport default GameOfLife;\n\n// import React, { useState, useEffect } from \"react\";\n// import Grid from \"./Grid\";\n// import \"./GameOfLife.css\";\n\n// const GameOfLife = () => {\n//   const [numRows, setNumRows] = useState(20);\n//   const [numCols, setNumCols] = useState(20);\n//   const [grid, setGrid] = useState([]);\n//   const [livingCells, setLivingCells] = useState(0);\n//   const [heightError, setHeightError] = useState(\"\");\n//   const [tempRows, setTempRows] = useState(numRows);\n//   const [tempCols, setTempCols] = useState(numCols);\n\n//   useEffect(() => {\n//     initializeGrid();\n//   }, []);\n\n//   useEffect(() => {\n//     countLivingCells();\n//   }, [grid]);\n\n//   useEffect(() => {\n//     initializeGrid();\n//   }, [numRows, numCols]);\n\n//   const initializeGrid = () => {\n//     if (numRows > 0 && numCols > 0) {\n//       const newGrid = Array.from({ length: numRows }, () =>\n//         Array.from({ length: numCols }, () => (Math.random() < 0.05 ? 1 : 0))\n//       );\n//       setGrid(newGrid);\n//     }\n//   };\n\n//   const toggleCell = (i, j) => {\n//     const newGrid = [...grid];\n//     newGrid[i][j] = newGrid[i][j] ? 0 : 1;\n//     setGrid(newGrid);\n//   };\n\n//   const countLivingCells = () => {\n//     let count = 0;\n//     grid.forEach((row) => {\n//       row.forEach((cell) => {\n//         if (cell) count++;\n//       });\n//     });\n//     setLivingCells(count);\n//   };\n\n//   const resetGrid = () => {\n//     setNumRows(20);\n//     setNumCols(20);\n//     setTempCols(20);\n//     setTempRows(20);\n//     setHeightError(\"\");\n//     initializeGrid();\n//   };\n\n//   const stepSimulation = () => {\n//     const newGrid = [];\n//     for (let i = 0; i < numRows; i++) {\n//       const newRow = [];\n//       for (let j = 0; j < numCols; j++) {\n//         const neighbors = countNeighbors(i, j);\n//         if (grid[i][j] === 1) {\n//           if (neighbors < 2 || neighbors > 3) {\n//             newRow.push(0); // Rule 1 and Rule 3\n//           } else {\n//             newRow.push(1); // Rule 2\n//           }\n//         } else {\n//           if (neighbors === 3) {\n//             newRow.push(1); // Rule 4\n//           } else {\n//             newRow.push(0);\n//           }\n//         }\n//       }\n//       newGrid.push(newRow);\n//     }\n//     setGrid(newGrid);\n//   };\n\n//   const countNeighbors = (i, j) => {\n//     const offsets = [\n//       [-1, -1],\n//       [-1, 0],\n//       [-1, 1],\n//       [0, -1],\n//       [0, 1],\n//       [1, -1],\n//       [1, 0],\n//       [1, 1],\n//     ];\n//     let count = 0;\n//     offsets.forEach(([dx, dy]) => {\n//       const ni = i + dx;\n//       const nj = j + dy;\n//       if (\n//         ni >= 0 &&\n//         ni < numRows &&\n//         nj >= 0 &&\n//         nj < numCols &&\n//         grid[ni][nj] === 1\n//       ) {\n//         count++;\n//       }\n//     });\n//     return count;\n//   };\n\n//   const handleInputChange = (e, setter) => {\n//     const value = parseInt(e.target.value);\n//     if (!isNaN(value) && value >= 3 && value <= 40) {\n//       setter(value);\n//       setHeightError(\"\");\n//     } else {\n//       setHeightError(\"Please enter a number between 3 and 40\");\n//     }\n//   };\n\n//   const handleKeyDown = (e) => {\n//     if (e.key === \"Enter\") {\n//       handleInputChange({ target: { value: tempRows } }, setNumRows);\n//       handleInputChange({ target: { value: tempCols } }, setNumCols);\n//       initializeGrid();\n//     }\n//   };\n\n//   return (\n//     <div className=\"game-container\">\n//       <div className=\"grid-info\">\n//         <span>Living Cells: {livingCells}</span>\n//         <div>\n//           <input\n//             type=\"number\"\n//             value={tempRows}\n//             onChange={(e) => handleInputChange(e, setTempRows)}\n//             onKeyDown={handleKeyDown}\n//           />\n//           <input\n//             type=\"number\"\n//             value={tempCols}\n//             onChange={(e) => handleInputChange(e, setTempCols)}\n//             onKeyDown={handleKeyDown}\n//           />\n//           {heightError && <div className=\"error\">{heightError}</div>}\n//         </div>\n//         <button onClick={resetGrid}>Reset Grid</button>\n//         <button onClick={stepSimulation}>Step</button>\n//       </div>\n//       <Grid grid={grid} toggleCell={toggleCell} />\n//     </div>\n//   );\n// };\n\n// export default GameOfLife;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}